// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_posts is a generated GoMock package.
package mock_posts

import (
	context "context"
	models "myHabr/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPostUsecase is a mock of PostUsecase interface.
type MockPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPostUsecaseMockRecorder
}

// MockPostUsecaseMockRecorder is the mock recorder for MockPostUsecase.
type MockPostUsecaseMockRecorder struct {
	mock *MockPostUsecase
}

// NewMockPostUsecase creates a new mock instance.
func NewMockPostUsecase(ctrl *gomock.Controller) *MockPostUsecase {
	mock := &MockPostUsecase{ctrl: ctrl}
	mock.recorder = &MockPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostUsecase) EXPECT() *MockPostUsecaseMockRecorder {
	return m.recorder
}

// BlockCommentsOnPost mocks base method.
func (m *MockPostUsecase) BlockCommentsOnPost(ctx context.Context, data *models.CommentsBlockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommentsOnPost", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockCommentsOnPost indicates an expected call of BlockCommentsOnPost.
func (mr *MockPostUsecaseMockRecorder) BlockCommentsOnPost(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommentsOnPost", reflect.TypeOf((*MockPostUsecase)(nil).BlockCommentsOnPost), ctx, data)
}

// CreateComment mocks base method.
func (m *MockPostUsecase) CreateComment(ctx context.Context, data *models.CommentCreateData) (*models.CommentCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, data)
	ret0, _ := ret[0].(*models.CommentCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostUsecaseMockRecorder) CreateComment(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostUsecase)(nil).CreateComment), ctx, data)
}

// CreatePost mocks base method.
func (m *MockPostUsecase) CreatePost(ctx context.Context, data *models.PostCreateData) (*models.PostCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, data)
	ret0, _ := ret[0].(*models.PostCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostUsecaseMockRecorder) CreatePost(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostUsecase)(nil).CreatePost), ctx, data)
}

// GetPostById mocks base method.
func (m *MockPostUsecase) GetPostById(ctx context.Context, postId int64) (*models.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, postId)
	ret0, _ := ret[0].(*models.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostUsecaseMockRecorder) GetPostById(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPostUsecase)(nil).GetPostById), ctx, postId)
}

// GetPosts mocks base method.
func (m *MockPostUsecase) GetPosts(ctx context.Context) ([]*models.PostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx)
	ret0, _ := ret[0].([]*models.PostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockPostUsecaseMockRecorder) GetPosts(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockPostUsecase)(nil).GetPosts), ctx)
}

// MockPostRepo is a mock of PostRepo interface.
type MockPostRepo struct {
	ctrl     *gomock.Controller
	recorder *MockPostRepoMockRecorder
}

// MockPostRepoMockRecorder is the mock recorder for MockPostRepo.
type MockPostRepoMockRecorder struct {
	mock *MockPostRepo
}

// NewMockPostRepo creates a new mock instance.
func NewMockPostRepo(ctrl *gomock.Controller) *MockPostRepo {
	mock := &MockPostRepo{ctrl: ctrl}
	mock.recorder = &MockPostRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostRepo) EXPECT() *MockPostRepoMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockPostRepo) BeginTx(ctx context.Context) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockPostRepoMockRecorder) BeginTx(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockPostRepo)(nil).BeginTx), ctx)
}

// BlockCommentsOnPost mocks base method.
func (m *MockPostRepo) BlockCommentsOnPost(ctx context.Context, data *models.CommentsBlockRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockCommentsOnPost", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlockCommentsOnPost indicates an expected call of BlockCommentsOnPost.
func (mr *MockPostRepoMockRecorder) BlockCommentsOnPost(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockCommentsOnPost", reflect.TypeOf((*MockPostRepo)(nil).BlockCommentsOnPost), ctx, data)
}

// CreateComment mocks base method.
func (m *MockPostRepo) CreateComment(ctx context.Context, tx models.Transaction, comment *models.CommentCreateData) (*models.CommentCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, tx, comment)
	ret0, _ := ret[0].(*models.CommentCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockPostRepoMockRecorder) CreateComment(ctx, tx, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockPostRepo)(nil).CreateComment), ctx, tx, comment)
}

// CreatePost mocks base method.
func (m *MockPostRepo) CreatePost(ctx context.Context, post *models.PostCreateData) (*models.PostCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, post)
	ret0, _ := ret[0].(*models.PostCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockPostRepoMockRecorder) CreatePost(ctx, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockPostRepo)(nil).CreatePost), ctx, post)
}

// GetAllPostIds mocks base method.
func (m *MockPostRepo) GetAllPostIds(ctx context.Context) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPostIds", ctx)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPostIds indicates an expected call of GetAllPostIds.
func (mr *MockPostRepoMockRecorder) GetAllPostIds(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPostIds", reflect.TypeOf((*MockPostRepo)(nil).GetAllPostIds), ctx)
}

// GetCommentsByPostId mocks base method.
func (m *MockPostRepo) GetCommentsByPostId(ctx context.Context, postId int64) ([]*models.CommentTree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsByPostId", ctx, postId)
	ret0, _ := ret[0].([]*models.CommentTree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsByPostId indicates an expected call of GetCommentsByPostId.
func (mr *MockPostRepoMockRecorder) GetCommentsByPostId(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsByPostId", reflect.TypeOf((*MockPostRepo)(nil).GetCommentsByPostId), ctx, postId)
}

// GetPostById mocks base method.
func (m *MockPostRepo) GetPostById(ctx context.Context, postId int64) (*models.PostCreateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, postId)
	ret0, _ := ret[0].(*models.PostCreateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockPostRepoMockRecorder) GetPostById(ctx, postId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockPostRepo)(nil).GetPostById), ctx, postId)
}
