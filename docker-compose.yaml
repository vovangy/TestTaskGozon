version: "3.9"

services:
  db:
    container_name: postgres
    restart: always
    build:
      context: .
      dockerfile: ./build/postgres.Dockerfile
    volumes:
      - type: volume
        source: postgresdb-data
        target: /var/lib/postgresql/data
    env_file:
      - ./.env
    ports:
      - ${DB_PORT}:5432
    networks:
      - myHabr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: migrate/migrate
    depends_on:
      db:
        condition: service_healthy
    networks:
      - myHabr-network
    volumes:
      - ./db/migrations:/migrations
    command: ["-path", "/migrations", "-database",  "postgres://${DB_USER}:${DB_PASS}@db:5432/${DB_NAME}?sslmode=disable", "up"]
    links: 
      - db

  main:
    depends_on:
      - db
    container_name: mainService
    build:
      context: .
      dockerfile: ./build/main.Dockerfile
    ports:
      - '8080:8080'
    env_file:
      - ./.env
    networks:
      - myHabr-network

  myhabr-user:
    env_file:
      - ./.env
    container_name: ${GRPC_USER_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/user.Dockerfile
    restart: always
    expose:
      - "${GRPC_USER_PORT}"
    depends_on:
      - db
    networks:
      - myHabr-network

  myhabr-post:
    env_file:
      - ./.env
    container_name: ${GRPC_POST_CONTAINER_IP}
    build:
      context: .
      dockerfile: ./build/post.Dockerfile
    restart: always
    expose:
      - "${GRPC_POST_PORT}"
    depends_on:
      - db
    networks:
      - myHabr-network

volumes:
  postgresdb-data:
    driver: local

networks:
  myHabr-network:
    name: myHabr-network
    driver: bridge
